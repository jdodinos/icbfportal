<?php

/**
 * @file
 * icbf theme file.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\EntityInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\node\NodeInterface;
use Drupal\views\Views;

/**
 * Implements hook_preprocess_HOOK().
 */
function icbf_preprocess_html(&$variables) {
  // Add classes generics.
  $current_path = \Drupal::service('path.current')->getPath();

  // Add class node type.
  if (isset($variables['node_type'])) {
    $variables['attributes']['class'][] = 'node-type-' . $variables['node_type'];
  }

  foreach (\Drupal::routeMatch()->getParameters() as $param) {
    if ($param instanceof EntityInterface) {
      // Add class to Vocabularies.
      if ($param instanceof Term) {
        $vid = $param->vid->getString();
        $variables['attributes']['class'][] = 'page-taxonomy-' . $vid;
      }
    }
  }

  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $variables['attributes']['class'][] = 'frontpage';
  }

  // Add classes to path alias.
  $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  $path_alias = 'page-' . ltrim($path_alias, '/');
  $path_alias = strtolower($path_alias);
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($path_alias);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function icbf_preprocess_page(&$variables) {
}

/**
 * Implements hook_preprocess_HOOK().
 */
function icbf_preprocess_field(&$variables) {
  $field_to_check = [
    'body',
    'field_builder',
    'field_content',
    'field_landings_top',
    'field_nnna_body',
    'field_video_02',
  ];
  // if (in_array($variables['field_name'], $field_to_check)) {
    $items = &$variables['items'];
    foreach ($items as &$item) {
      if (isset($item['content'])) {
        if (is_null($item['content']['#format'])) {
          $item['content']['#format'] = 'full_html';
        }
      }

      if (isset($item['content']['#text'])) {
        $html = $item['content']['#text'];
        $item['content']['#text'] = icbf_files_directory_process($html);
      }
    }
  // }

  $fields_with_views = ['field_faqs_related'];
  if (in_array($variables['field_name'], $fields_with_views)) {
    $items = &$variables['items'];
    foreach ($items as &$item) {
      if (isset($item['content']['#text'])) {
        $html = $item['content']['#text'];
        if (strpos($html, 'data-azb="az_view')) {
          $explode_html = explode('</div>', $html);
          foreach ($explode_html as $original_element) {
            if (strpos($original_element, 'data-azb="az_view')) {
              $original_element .= '</div>';
              $element = trim($original_element);

              // Check if there are contextual filters.
              $filter = [];
              $pos_contextual_filter = strpos($element, 'data-azat-contextual_filter');
              if ($pos_contextual_filter) {
                $string = substr($element, $pos_contextual_filter);
                $string_array = explode('"', $string);
                $filter = isset($string_array[1]) ? explode('/', $string_array[1]) : [];
              }

              // Check if view data.
              $view_data = [];
              $pos_view_info = strpos($element, 'data-azb=');
              if ($pos_contextual_filter) {
                $string = substr($element, $pos_view_info);
                $string_array = explode('"', $string);
                $view_data = isset($string_array[1]) ? explode('-', $string_array[1]) : [];

                if (isset($view_data[1]) && isset($view_data[2])) {
                  $view = Views::getView($view_data[1]);
                  if ($view) {
                    $view->setDisplay($view_data[2]);
                    $view->preExecute();
                    $view->execute();

                    if (!empty($filter)) {
                      $view->setArguments($filter);
                    }

                    // Render it
                    $render_array = $view->render();
                    $html_view = \Drupal::service('renderer')->renderRoot($render_array);
                    $item['content']['#text'] = str_replace($original_element, $html_view, $html);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

function icbf_preprocess_views_view_field(&$variables) {
  if (isset($variables['field']->options['type']) && $variables['field']->options['type'] == 'video_player') {
    $field_name = $variables['field']->options['field'];
    $entity = $variables['row']->_entity;

    if ($entity && $entity->hasField($field_name)) {
      // @see Drupal\file\Entity\File.
      $file = $entity->$field_name->entity;
      if ($file && $file instanceof Drupal\file\Entity\File) {
        $uri = $file->getFileUri();
        $file_url_generator = \Drupal::service('file_url_generator');
        $variables['video_url'] = $file_url_generator->generateAbsoluteString($file->getFileUri());
      }
    }
  }
}

function icbf_theme_suggestions_views_view_field_alter(array &$suggestions, array $variables) {
  $view = $variables['view'];
  $display_id = $view->current_display;
  $field = $variables['field']->field;


  $suggestions[] = "views_view_field__{$view->id()}__{$display_id}__{$field}";
}

/**
 * Processes the HTML content to replace placeholders with actual values.
 *
 * @param string $html
 *   The HTML content to process.
 *
 * @return string
 *   The processed HTML content with placeholders replaced.
 */
function icbf_files_directory_process($html) {
  if (strpos($html, '-base-url-') === FALSE && strpos($html, '-files-directory-') === FALSE) {
    return $html;
  }

  $request = \Drupal::service('request_stack')->getCurrentRequest();
  $base_url = $request->getSchemeAndHttpHost();
  $public_files_path = \Drupal::config('system.file')->get('path.public') ?? 'sites/default/files';
  $html = str_replace('-base-url-', $base_url, $html);
  $html = str_replace('-files-directory-', $public_files_path, $html);
  return $html;
}
