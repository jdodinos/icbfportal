<?php

/**
 * @file
 * icbf theme file.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\EntityInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\node\NodeInterface;
use Drupal\views\Views;

/**
 * Implements hook_preprocess_HOOK().
 */
function icbf_preprocess_html(&$variables) {
  // Add classes generics.
  $current_path = \Drupal::service('path.current')->getPath();

  // Add class node type.
  if (isset($variables['node_type'])) {
    $variables['attributes']['class'][] = 'node-type-' . $variables['node_type'];
  }

  foreach (\Drupal::routeMatch()->getParameters() as $param) {
    if ($param instanceof EntityInterface) {
      // Add class to Vocabularies.
      if ($param instanceof Term) {
        $vid = $param->vid->getString();
        $variables['attributes']['class'][] = 'page-taxonomy-' . $vid;
        $variables['attributes']['class'][] = 'page-id-' . $param->id();

        if ($param->hasField('field_path_class') && !$param->get('field_path_class')->isEmpty()) {
          $raw_class = $param->field_path_class->value;
          // Trim whitespace, convert to lowercase, and sanitize it as a valid CSS class.
          $sanitized_class = Html::cleanCssIdentifier(strtolower(trim($raw_class)));

          $variables['attributes']['class'][] = "page-{$sanitized_class}";
          $variables['attributes']['class'][] = $sanitized_class;
        }
      }
    }
  }

  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $variables['attributes']['class'][] = 'frontpage';
  }

  // Add classes to path alias.
  $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  $path_alias = 'page-' . ltrim($path_alias, '/');
  $path_alias = strtolower($path_alias);
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($path_alias);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function icbf_preprocess_page(&$variables) {
}

/**
 * Implements hook_preprocess_HOOK().
 */
function icbf_preprocess_field(&$variables) {
  $field_to_check = [
    'body',
    'field_builder',
    'field_content',
    'field_landings_top',
    'field_nnna_body',
    'field_video_02',
  ];
  // if (in_array($variables['field_name'], $field_to_check)) {
    $items = &$variables['items'];
    foreach ($items as &$item) {
      if (isset($item['content'])) {
        if (is_null($item['content']['#format'])) {
          $item['content']['#format'] = 'full_html';
        }
      }

      if (isset($item['content']['#text'])) {
        $html = $item['content']['#text'];
        $item['content']['#text'] = icbf_files_directory_process($html);
        if (strpos($html, 'glazed_builder')) {
          $item_pos = strpos($html, '<link rel="stylesheet"');
          $html2 = substr($html, $item_pos);
          $html_close_pos = strpos($html2, '>');
          $html_close = substr($html, $item_pos, $html_close_pos);
        }

        if (strpos($item['content']['#text'], 'owl-carousel st-owl-theme') !== FALSE) {
          $html_text = &$item['content']['#text'];
          $html_text = str_replace('owl-carousel st-owl-theme', 'icbf-owl-carousel', $html_text);
          $html_text = str_replace('owl-wrapper', 'icbf-owl-carousel-wrapper', $html_text);
          // $html_text = str_replace('class="owl-item"', 'class="icbf-owl-item"', $html_text);
          // Remover todos los atributos style="..."
          $html_text = preg_replace('/\s*style="[^"]*"/i', '', $html_text);

        }
      }
    }
  // }


  $items = &$variables['items'];
  foreach ($items as &$item) {
    if (isset($item['content']['#text'])) {
      $html = $item['content']['#text'];
      // For views in Glazed Builder.
      if (strpos($html, 'data-azb="az_view')) {
        $explode_html = explode('</div>', $html);
        foreach ($explode_html as &$original_element) {

          if (strpos($original_element, 'data-azb="az_view')) {
            $last_div_pos = strrpos($original_element, '<div');
            $element = substr($original_element, $last_div_pos);
            $element = trim($element);

            // Check if there are contextual filters.
            $filter = [];
            $pos_contextual_filter = strpos($element, 'data-azat-contextual_filter');
            if ($pos_contextual_filter) {
              $string = substr($element, $pos_contextual_filter);
              $string_array = explode('"', $string);
              $filter = isset($string_array[1]) ? explode('/', $string_array[1]) : [];
            }

            // Check if view data.
            $view_data = [];
            $pos_view_info = strpos($element, 'data-azb="az_view');
            $string = substr($element, $pos_view_info);
            $string_array = explode('"', $string);
            $view_data = isset($string_array[1]) ? explode('-', $string_array[1]) : [];
            if (isset($view_data[1]) && isset($view_data[2])) {
              $view = Views::getView($view_data[1]);
              if ($view) {
                $view->setDisplay($view_data[2]);

                if (!empty($filter)) {
                  $view->setArguments($filter);
                }
                $view->preExecute();
                $view->execute();

                // Render it.
                $render_array = $view->render();
                $html_view = \Drupal::service('renderer')->render($render_array);
                $html_view = $element . $html_view . '</div>';
                $original_element = str_replace($element, $html_view, $original_element);
              }
            }
          }
          else {
            $original_element .= '</div>';
          }
        }
        $explode_html = implode('', $explode_html);
        $item['content']['#text'] = str_replace($html, $explode_html, $item['content']['#text']);
      }

      // For blocks in Glazed Builder.
      if (strpos($html, 'data-azb="az_block')) {
        $html = $item['content']['#text'];
        $explode_html = explode('</div>', $html);
        foreach ($explode_html as &$original_element) {
          if (strpos($original_element, 'data-azb="az_block')) {
            $last_div_pos = strrpos($original_element, '<div');
            $element = substr($original_element, $last_div_pos);
            $element = trim($element);

            // Check if view data.
            $block_data = [];
            $pos_block_info = strpos($element, 'data-azb="az_block');
            $string = substr($element, $pos_block_info);
            $string_array = explode('"', $string);
            foreach ($string_array as $elem_value) {
              if (strpos($elem_value, 'az_block') !== FALSE) {
                $block_id = str_replace('az_block-bean', '', $elem_value);
                $block_id = str_replace('---', '|+|', $block_id);
                $block_id = str_replace('-', ' ', $block_id);
                $block_info = trim(str_replace('|+|', ' - ', $block_id));

                $blocks = \Drupal::entityTypeManager()
                  ->getStorage('block_content')
                  ->loadByProperties(['info' => $block_info]);
                $block = reset($blocks);

                if ($block) {
                  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('block_content');
                  $render_array = $view_builder->view($block);
                  $html_block = \Drupal::service('renderer')->renderRoot($render_array);
                  $html_view = $element . $html_block . '</div>';
                  $original_element = str_replace($element, $html_view, $original_element);
                }
              }
            }
          }
          else {
            $original_element .= '</div>';
          }
        }

        $explode_html = implode('', $explode_html);
        $item['content']['#text'] = str_replace($html, $explode_html, $item['content']['#text']);
      }

      // For Iconsd in Glazed Builder.
      if (strpos($html, 'data-azat-icon="')) {
        $html = $item['content']['#text'];
        $explode_html = explode('</div>', $html);
        foreach ($explode_html as $original_element) {
          if (strpos($original_element, 'data-azat-icon="')) {
            $original_element .= '</div>';
            $element = trim($original_element);

            // Check if view data.
            $block_data = [];
            $pos_block_info = strpos($element, 'data-azat-icon="');
            $string = substr($element, $pos_block_info);
            $string_array = explode('"', $string);
            $icon_class = [];
            $icon_style = '';
            foreach ($string_array as $elem_value) {
              if (strpos($elem_value, 'pe pe-') !== FALSE || strpos($elem_value, 'et et-') !== FALSE || strpos($elem_value, 'fa') !== FALSE) {
                $icon_class[] = $elem_value;
              }
              elseif (strpos($elem_value, 'color:') !== FALSE) {
                $icon_style = $elem_value;
              }
            }

            if (!empty($icon_class)) {
              $icon_class = implode(' ', $icon_class);
              $icon_html = '<i class="' . $icon_class . '"';
              if (!empty($icon_style)) {
                $icon_html .= ' style="' . $icon_style . '"';
              }
              $icon_html .= '></i>';
              $element = str_replace('&nbsp;', $icon_html, $original_element);
              $html = str_replace($original_element, $element, $html);
            }
          }
        }

        $item['content']['#text'] = $html;
      }
    }
  }
}

function icbf_preprocess_layout(&$variables) {
  if (isset($variables['attributes']['class'][2])) {
    $variables['attributes']['class'][1] = 'layout--unecol-section';
    unset($variables['attributes']['class'][2]);
  }
}

function icbf_preprocess_views_view_field(&$variables) {
  if (isset($variables['field']->options['type']) && $variables['field']->options['type'] == 'video_player') {
    $field_name = $variables['field']->options['field'];
    $entity = $variables['row']->_entity;

    if ($entity && $entity->hasField($field_name)) {
      // @see Drupal\file\Entity\File.
      $file = $entity->$field_name->entity;
      if ($file && $file instanceof Drupal\file\Entity\File) {
        $uri = $file->getFileUri();
        $file_url_generator = \Drupal::service('file_url_generator');
        $variables['video_url'] = $file_url_generator->generateAbsoluteString($file->getFileUri());
      }
    }
  }

  // Formatter the value in the constructor field.
  if ($variables['field']->field == 'field_constructor') {
    if ($variables['output']) {
      $output = str_replace('<p>', '', $variables['output']);
      $output = str_replace('</p>', '', $output);
      $decoded_html = html_entity_decode($output);
      $variables['output'] = [
        '#markup' => $decoded_html,
      ];
    }
  }

  // Check if the current field being rendered is 'field_news_files'.
  if ($variables['field']->field == 'field_news_files') {
    // Get the ID of the current View and its display.
    $view_id = $variables['view']->id();
    $display_id = $variables['view']->current_display;

    if ($view_id == 'actas_contentivas' && $display_id == 'block') {
      // @see \Drupal\node\Entity\Node
      $entity = $variables['row']->_entity;

      // Replace the filename with the node title in the rendered field output.
      $output = icbf_change_filename_by_title('field_news_files', $entity, $variables['output']);
      $variables['output'] = [
        '#markup' => $output
      ];
    }
  }

  // Check if the current field being rendered is 'field_document'.
  if ($variables['field']->field == 'field_document') {
    // Get the ID of the current View and its display.
    $view_id = $variables['view']->id();
    $display_id = $variables['view']->current_display;
    $displayes = ['block_2', 'block_4', 'block_7'];

    if ($view_id == 'sige_process' && in_array($display_id, $displayes)) {
      // @see \Drupal\node\Entity\Node
      $entity = $variables['row']->_entity;

      // Replace the filename with the node title in the rendered field output.
      $output = icbf_change_filename_by_title('field_document', $entity, $variables['output']);
      $variables['output'] = [
        '#markup' => $output
      ];
    }
  }
}

/**
 * The icbf_change_filename_by_title function
 */
function icbf_change_filename_by_title($field_name, $entity, $output) {
  if ($entity->hasField($field_name) && !$entity->get($field_name)->isEmpty()) {
    // @see \Drupal\file\Entity\File
    $file = $entity->get($field_name)->entity;

    // Ensure that the loaded entity is a valid File entity.
    if ($file instanceof \Drupal\file\Entity\File) {
      $title = $entity->getTitle();
      $filename = $file->getFilename();

      // Replace the filename with the node title in the rendered field output.
      $output = str_replace(">{$filename}<", ">{$title}<", $output);
    }

    return $output;
  }
}

function icbf_theme_suggestions_views_view_field_alter(array &$suggestions, array $variables) {
  $view = $variables['view'];
  $display_id = $view->current_display;
  $field = $variables['field']->field;


  $suggestions[] = "views_view_field_{$view->id()}{$display_id}_{$field}";
}

/**
 * Implementa hook_preprocess_block().
 */
function icbf_preprocess_block(&$variables) {
  // Remove the title of the page title block on the front page.
  if ($variables['plugin_id'] == 'page_title_block' && \Drupal::service('path.matcher')->isFrontPage()) {
    $variables['content']['#title'] = '';
  }

  if (isset($variables['elements']['#configuration']['formatter']['override_title'])) {
    $label_display = $variables['elements']['#configuration']['label_display'];
    $block_settings = $variables['elements']['#configuration']['formatter'];
    if ($label_display && $block_settings['override_title']) {
      if (is_array($variables['label'])) {
        $variables['label']['#markup'] = $block_settings['override_title_text'] ?? '';
      }
    }
  }
}

/**
 * Processes the HTML content to replace placeholders with actual values.
 *
 * @param string $html
 *   The HTML content to process.
 *
 * @return string
 *   The processed HTML content with placeholders replaced.
 */
function icbf_files_directory_process($html) {
  if (strpos($html, '-base-url-') === FALSE && strpos($html, '-files-directory-') === FALSE) {
    return $html;
  }

  $request = \Drupal::service('request_stack')->getCurrentRequest();
  $base_url = $request->getSchemeAndHttpHost();
  $public_files_path = \Drupal::config('system.file')->get('path.public') ?? 'sites/default/files';
  $html = str_replace('-base-url-', $base_url, $html);
  $html = str_replace('-files-directory-', $public_files_path, $html);
  return $html;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function icbf_preprocess_tb_megamenu_item(&$variables) {
  $link_title = Html::cleanCssIdentifier($variables['link']['title']);
  $variables['attributes']['class'][] = 'item-link-' . strtolower($link_title);
}

/**
 * Implements hook_page_attachments_alter().
 */
function icbf_page_attachments_alter(array &$attachments) {
  $term = \Drupal::routeMatch()->getParameter('taxonomy_term');
  if ($term && $term instanceof EntityInterface) {
    $vocabulary = $term->bundle();

    if ($vocabulary == 'ninos_ninas_y_adolescentes') {
      $global_style_index = array_search('icbf/main-styling', $attachments['#attached']['library']);
      if ($global_style_index !== FALSE) {
        unset($attachments['#attached']['library'][$global_style_index]);
      }
      $attachments['#attached']['library'][] = 'icbf/ninos-y-ninas';
    }
  }
}
