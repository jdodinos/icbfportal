<?php

/**
 * @file
 * icbf theme file.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\EntityInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\node\NodeInterface;

/**
 * Implements hook_preprocess_HOOK().
 */
function icbf_preprocess_html(&$variables) {
  // Add classes generics.
  $current_path = \Drupal::service('path.current')->getPath();

  // Add class node type.
  if (isset($variables['node_type'])) {
    $variables['attributes']['class'][] = 'node-type-' . $variables['node_type'];
  }

  foreach (\Drupal::routeMatch()->getParameters() as $param) {
    if ($param instanceof EntityInterface) {
      // Add class to Vocabularies.
      if ($param instanceof Term) {
        $vid = $param->vid->getString();
        $variables['attributes']['class'][] = 'page-taxonomy-' . $vid;
      }
    }
  }

  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $variables['attributes']['class'][] = 'frontpage';
  }

  // Add classes to path alias.
  $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  $path_alias = 'page-' . ltrim($path_alias, '/');
  $path_alias = strtolower($path_alias);
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($path_alias);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function icbf_preprocess_page(&$variables) {
}

/**
 * Implements hook_preprocess_HOOK().
 */
function icbf_preprocess_field(&$variables) {
  $field_to_check = [
    'body',
    'field_builder',
    'field_content',
    'field_landings_top',
    'field_nnna_body',
    'field_video_02',
  ];
  // if (in_array($variables['field_name'], $field_to_check)) {
    $items = &$variables['items'];
    foreach ($items as &$item) {
      if (isset($item['content'])) {
        if (is_null($item['content']['#format'])) {
          $item['content']['#format'] = 'full_html';
        }
      }

      if (isset($item['content']['#text'])) {
        $html = $item['content']['#text'];
        $item['content']['#text'] = icbf_files_directory_process($html);
      }
    }
  // }
}

/**
 * Processes the HTML content to replace placeholders with actual values.
 *
 * @param string $html
 *   The HTML content to process.
 *
 * @return string
 *   The processed HTML content with placeholders replaced.
 */
function icbf_files_directory_process($html) {
  if (strpos($html, '-base-url-') === FALSE && strpos($html, '-files-directory-') === FALSE) {
    return $html;
  }

  $request = \Drupal::service('request_stack')->getCurrentRequest();
  $base_url = $request->getSchemeAndHttpHost();
  $public_files_path = \Drupal::config('system.file')->get('path.public') ?? 'sites/default/files';
  $html = str_replace('-base-url-', $base_url, $html);
  $html = str_replace('-files-directory-', $public_files_path, $html);
  return $html;
}
