<?php

namespace Drupal\custom_solr_search\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;

/**
 * Provides the advanced search form for the Custom Solr Search module.
 */
class AdvancedSearchForm extends FormBase {

  /**
   * {@inheritdoc}
   */
  public function getFormId() {
    return 'custom_solr_advanced_search_form';
  }

  /**
   * Builds the search form.
   *
   * @param array $form
   *   The form structure.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The form state.
   *
   * @return array
   *   The rendered form.
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    // Attach library and CSS class.
    $form['#attached']['library'][] = 'custom_solr_search/global';
    $form['#attributes']['class'][] = 'custom-search-form';

    // Search input.
    $form['search'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Buscar'),
      '#attributes' => [
        'id' => 'search-input',
        'placeholder' => $this->t('Escribe para buscar...'),
        'autocomplete' => 'off',
      ],
      '#default_value' => $form_state->getValue('search', ''),
    ];

    // Toggle advanced filters.
    $form['toggle_advanced'] = [
      '#type' => 'button',
      '#value' => $this->t('BÃºsqueda avanzada'),
      '#attributes' => [
        'onclick' => 'jQuery(".advanced-filters").toggle(); return false;',
        'class' => ['toggle-advanced'],
      ],
    ];

    // Advanced filters container (initially hidden via CSS).
    $form['advanced'] = [
      '#type' => 'container',
      '#attributes' => ['class' => ['advanced-filters']],
    ];

    // Author filter.
    $users = \Drupal::entityTypeManager()->getStorage('user')->loadMultiple();
    $author_options = ['' => '- Seleccione -'];
    foreach ($users as $user) {
      if ($user->id() != 0) {
        $author_options[$user->id()] = $user->getDisplayName();
      }
    }
    $form['advanced']['author'] = [
      '#type' => 'select',
      '#title' => $this->t('Autor'),
      '#options' => $author_options,
      '#default_value' => $form_state->getValue('author', ''),
    ];

    // Topic filter (taxonomy terms).
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('taxonomy');
    $topic_options = ['' => '- Seleccione -'];
    foreach ($terms as $term) {
      $topic_options[$term->tid] = $term->name;
    }
    $form['advanced']['topic'] = [
      '#type' => 'select',
      '#title' => $this->t('Tema'),
      '#options' => $topic_options,
      '#default_value' => $form_state->getValue('topic', ''),
    ];

    // File type filter.
    $form['advanced']['file_type'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Tipo de archivo'),
      '#default_value' => $form_state->getValue('file_type', ''),
    ];

    // Filename filter.
    $form['advanced']['filename'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Nombre del archivo'),
      '#default_value' => $form_state->getValue('filename', ''),
    ];

    // Publication date filter.
    $form['advanced']['date'] = [
      '#type' => 'date',
      '#title' => $this->t('Fecha de publicaciÃ³n'),
      '#default_value' => $form_state->getValue('date', ''),
    ];

    // Submit button.
    $form['submit'] = [
      '#type' => 'submit',
      '#value' => $this->t('Buscar'),
    ];

    // If the form has been submitted with any values, build results.
    if (
      $form_state->getValue('search') ||
      $form_state->getValue('author') ||
      $form_state->getValue('topic')
    ) {
      $form['results'] = $this->buildResults($form_state);
    }

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    // Rebuild form to show results.
    $form_state->setRebuild();
  }

  /**
   * Builds the search results render array.
   *
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The form state with submitted values.
   *
   * @return array
   *   A render array containing results and pager.
   */
  protected function buildResults(FormStateInterface $form_state) {
    $keywords  = $form_state->getValue('search');
    $author    = $form_state->getValue('author');
    $topic     = $form_state->getValue('topic');
    $file_type = $form_state->getValue('file_type');
    $filename  = $form_state->getValue('filename');
    $date      = $form_state->getValue('date');

    // Modern pagination in Drupal 10+.
    $current_page = \Drupal::service('pager.parameters')->findPage();
    $limit = 10;
    $offset = $current_page * $limit;

    // Load Search API index.
    $index = \Drupal::entityTypeManager()->getStorage('search_api_index')->load('icbf');

    // Main query.
    $query = $index->query()
      ->keys($keywords)
      ->range($offset, $limit);

    if ($author)    { $query->addCondition('field_author', $author); }
    if ($topic)     { $query->addCondition('field_topic', $topic); }
    if ($file_type) { $query->addCondition('field_file_type', $file_type); }
    if ($filename)  { $query->addCondition('field_filename', $filename, 'CONTAINS'); }
    if ($date)      { $query->addCondition('field_publication_date', $date); }

    $results = $query->execute();

    // Count query for pagination.
    $count_query = $index->query()->keys($keywords);
    if ($author)    { $count_query->addCondition('field_author', $author); }
    if ($topic)     { $count_query->addCondition('field_topic', $topic); }
    if ($file_type) { $count_query->addCondition('field_file_type', $file_type); }
    if ($filename)  { $count_query->addCondition('field_filename', $filename, 'CONTAINS'); }
    if ($date)      { $count_query->addCondition('field_publication_date', $date); }

    $total_results = $count_query->execute()->getResultCount();

    // Initialize pager.
    \Drupal::service('pager.manager')->createPager($total_results, $limit);

    // Prepare result items for theme.
    $rendered = [];
    foreach ($results as $item) {
      $fields = $item->getFields();
       $title   = isset($fields['title']) ? $fields['title']->getValues()[0] : '';
      $uri     = isset($fields['url']) ? $fields['url']->getValues()[0] : (isset($fields['field_source_url']) ? $fields['field_source_url']->getValues()[0] : '');
      $snippet = isset($fields['search_api_excerpt']) ? $fields['search_api_excerpt']->getValues()[0] : '';
      $type    = isset($fields['field_file_type']) ? $fields['field_file_type']->getValues()[0] : '';

      $rendered[] = [
        'title'     => $title,
        'uri'       => $uri,
        'snippet'   => $snippet,
        'file_type' => $type,
      ];
    }

    return [
      '#theme' => 'search_results',
      '#results' => $rendered,
      '#total_results' => $total_results,
      '#pager' => [
        '#type' => 'pager',
      ],
    ];
  }
}

